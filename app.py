import streamlit as st
import pandas as pd
import numpy as np
import requests
from io import BytesIO
import base64
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# ========================
# –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´
# ========================
st.set_page_config(
    page_title="DDMRP –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏",
    page_icon="üìä",
    layout="wide"
)

# ========================
# –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
# ========================

def download_google_sheet(sheet_url):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ Google Sheets"""
    try:
        if '/edit' in sheet_url:
            csv_url = sheet_url.replace('/edit?gid=', '/export?format=csv&gid=')
            csv_url = csv_url.split('#')[0]
        else:
            csv_url = sheet_url
        
        response = requests.get(csv_url)
        if response.status_code == 200:
            df = pd.read_csv(BytesIO(response.content))
            return df
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Google Sheets: {str(e)}")
        return None


def load_stock_file(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ Excel"""
    try:
        df = pd.read_excel(uploaded_file)
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
        column_mapping = {
            'Art': 'Article',
            'Magazin': 'Store_ID',
            'Describe': 'Describe',
            '–∫-–≤–æ': 'Current_Stock',
            'Model': 'Model'
        }
        
        df = df.rename(columns=column_mapping)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['Article', 'Store_ID', 'Describe', 'Current_Stock']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df['Current_Stock'] = pd.to_numeric(df['Current_Stock'], errors='coerce').fillna(0)
        df['Store_ID'] = df['Store_ID'].astype(str).str.strip()
        df['Article'] = df['Article'].astype(str).str.strip()
        
        return df
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel: {str(e)}")
        return None


def validate_matrix(df):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    required_cols = ['Article', 'Describe', 'Store_ID', 'Red_Zone', 'Yellow_Zone', 'Green_Zone']
    missing_cols = [col for col in required_cols if col not in df.columns]
    
    if missing_cols:
        st.error(f"‚ùå –í —Ç–æ—Ä–≥–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    df['Red_Zone'] = pd.to_numeric(df['Red_Zone'], errors='coerce')
    df['Yellow_Zone'] = pd.to_numeric(df['Yellow_Zone'], errors='coerce')
    df['Green_Zone'] = pd.to_numeric(df['Green_Zone'], errors='coerce')
    df['Store_ID'] = df['Store_ID'].astype(str).str.strip()
    df['Article'] = df['Article'].astype(str).str.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if df[required_cols].isnull().any().any():
        st.warning("‚ö†Ô∏è –í —Ç–æ—Ä–≥–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü–µ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö")
    
    return True


# ========================
# DDMRP –õ–û–ì–ò–ö–ê
# ========================

def calculate_ddmrp_status(matrix_df, stock_df):
    """
    –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –±—É—Ñ–µ—Ä–æ–≤ DDMRP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞–∂–¥–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
    """
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –∏ –æ—Å—Ç–∞—Ç–∫–∏
    merged = matrix_df.merge(
        stock_df[['Article', 'Store_ID', 'Current_Stock', 'Model']],
        on=['Article', 'Store_ID'],
        how='left'
    )
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω—É–ª—è–º–∏
    merged['Current_Stock'] = merged['Current_Stock'].fillna(0)
    
    # –†–∞—Å—á–µ—Ç Top of Green (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–∞)
    merged['Top_of_Green'] = merged['Red_Zone'] + merged['Yellow_Zone'] + merged['Green_Zone']
    
    # –†–∞—Å—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü –∑–æ–Ω
    merged['Red_Zone_Max'] = merged['Red_Zone']
    merged['Yellow_Zone_Max'] = merged['Red_Zone'] + merged['Yellow_Zone']
    merged['Green_Zone_Max'] = merged['Top_of_Green']
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—É—Ñ–µ—Ä–∞
    def get_buffer_status(row):
        stock = row['Current_Stock']
        if stock <= row['Red_Zone_Max']:
            return 'RED'
        elif stock <= row['Yellow_Zone_Max']:
            return 'YELLOW'
        elif stock <= row['Green_Zone_Max']:
            return 'GREEN'
        else:
            return 'EXCESS'  # –ò–∑–ª–∏—à–µ–∫
    
    merged['Buffer_Status'] = merged.apply(get_buffer_status, axis=1)
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
    merged['Buffer_Fill_Percent'] = (merged['Current_Stock'] / merged['Top_of_Green'] * 100).round(1)
    
    # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
    def calculate_order_qty(row):
        if row['Buffer_Status'] in ['RED', 'YELLOW']:
            # –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–æ Top of Green
            order_qty = row['Top_of_Green'] - row['Current_Stock']
            return max(0, order_qty)
        return 0
    
    merged['Order_Qty'] = merged.apply(calculate_order_qty, axis=1)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞ (RED = 1, YELLOW = 2, GREEN = 3, EXCESS = 4)
    priority_map = {'RED': 1, 'YELLOW': 2, 'GREEN': 3, 'EXCESS': 4}
    merged['Priority'] = merged['Buffer_Status'].map(priority_map)
    
    # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å Avg_Daily_Usage)
    if 'Avg_Daily_Usage' in merged.columns:
        merged['Avg_Daily_Usage'] = pd.to_numeric(merged['Avg_Daily_Usage'], errors='coerce').fillna(0)
        merged['Days_Until_Stockout'] = np.where(
            merged['Avg_Daily_Usage'] > 0,
            (merged['Current_Stock'] / merged['Avg_Daily_Usage']).round(1),
            np.inf
        )
    else:
        merged['Days_Until_Stockout'] = np.nan
    
    return merged


def generate_order_report(ddmrp_df):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∑–∞–∫–∞–∑–∞
    orders = ddmrp_df[ddmrp_df['Order_Qty'] > 0].copy()
    
    if orders.empty:
        return pd.DataFrame()
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –º–∞–≥–∞–∑–∏–Ω—É
    orders = orders.sort_values(['Priority', 'Store_ID', 'Article'])
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    report_columns = [
        'Store_ID', 'Article', 'Describe', 'Brand', 'Model',
        'Current_Stock', 'Top_of_Green', 'Order_Qty', 
        'Buffer_Status', 'Priority', 'Days_Until_Stockout'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    available_columns = [col for col in report_columns if col in orders.columns]
    
    return orders[available_columns].reset_index(drop=True)


# ========================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================

def create_buffer_status_chart(ddmrp_df):
    """–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –±—É—Ñ–µ—Ä–æ–≤"""
    status_counts = ddmrp_df['Buffer_Status'].value_counts()
    
    colors = {
        'RED': '#FF4444',
        'YELLOW': '#FFD700',
        'GREEN': '#44FF44',
        'EXCESS': '#4444FF'
    }
    
    fig = px.pie(
        values=status_counts.values,
        names=status_counts.index,
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—É—Ñ–µ—Ä–æ–≤',
        color=status_counts.index,
        color_discrete_map=colors
    )
    
    return fig


def create_store_summary_chart(ddmrp_df):
    """–ì—Ä–∞—Ñ–∏–∫ —Å–≤–æ–¥–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º"""
    store_summary = ddmrp_df.groupby(['Store_ID', 'Buffer_Status']).size().reset_index(name='Count')
    
    fig = px.bar(
        store_summary,
        x='Store_ID',
        y='Count',
        color='Buffer_Status',
        title='–°—Ç–∞—Ç—É—Å—ã –±—É—Ñ–µ—Ä–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º',
        color_discrete_map={
            'RED': '#FF4444',
            'YELLOW': '#FFD700',
            'GREEN': '#44FF44',
            'EXCESS': '#4444FF'
        },
        barmode='stack'
    )
    
    fig.update_layout(xaxis_title='–ú–∞–≥–∞–∑–∏–Ω', yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤')
    
    return fig


def create_top_orders_chart(orders_df, top_n=20):
    """–ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    if orders_df.empty:
        return None
    
    top_orders = orders_df.nlargest(top_n, 'Order_Qty')
    
    fig = px.bar(
        top_orders,
        x='Order_Qty',
        y='Describe',
        color='Buffer_Status',
        title=f'–¢–æ–ø-{top_n} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞',
        orientation='h',
        color_discrete_map={
            'RED': '#FF4444',
            'YELLOW': '#FFD700'
        }
    )
    
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    
    return fig


# ========================
# –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
# ========================

def create_excel_download(df, filename):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel"""
    if df is None or df.empty:
        return ""
    
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')
    
    excel_data = output.getvalue()
    b64 = base64.b64encode(excel_data).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">üì• –°–∫–∞—á–∞—Ç—å {filename}</a>'
    return href


# ========================
# STREAMLIT –ò–ù–¢–ï–†–§–ï–ô–°
# ========================

def main():
    st.title("üìä DDMRP: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
    st.markdown("**–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞–º–∏ –∑–∞–ø–∞—Å–æ–≤ –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ DDMRP**")
    st.markdown("---")
    
    # ========================
    # –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨
    # ========================
    st.sidebar.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # Google Sheets URL
    google_sheet_url = st.sidebar.text_input(
        "Google Sheets URL (—Ç–æ—Ä–≥–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞):",
        value="",
        help="–°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets —Å —Ç–æ—Ä–≥–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞
    uploaded_file = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏",
        type=['xlsx', 'xls'],
        help="–§–∞–π–ª —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    load_button = st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary")
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìñ –õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤")
    st.sidebar.markdown("üî¥ **RED** - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å")
    st.sidebar.markdown("üü° **YELLOW** - –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫–∞–∑")
    st.sidebar.markdown("üü¢ **GREEN** - –ù–æ—Ä–º–∞")
    st.sidebar.markdown("üîµ **EXCESS** - –ò–∑–ª–∏—à–µ–∫")
    
    # ========================
    # –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê
    # ========================
    
    if load_button:
        if not google_sheet_url:
            st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ URL Google Sheets")
            return
        
        if uploaded_file is None:
            st.error("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
            return
        
        with st.spinner("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã
            matrix_df = download_google_sheet(google_sheet_url)
            
            if matrix_df is not None:
                st.success(f"‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(matrix_df)} —Å—Ç—Ä–æ–∫")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not validate_matrix(matrix_df):
                    return
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
                stock_df = load_stock_file(uploaded_file)
                
                if stock_df is not None:
                    st.success(f"‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(stock_df)} —Å—Ç—Ä–æ–∫")
                    
                    # –†–∞—Å—á–µ—Ç DDMRP
                    with st.spinner("üîÑ –†–∞—Å—á–µ—Ç –±—É—Ñ–µ—Ä–æ–≤ DDMRP..."):
                        ddmrp_df = calculate_ddmrp_status(matrix_df, stock_df)
                        orders_df = generate_order_report(ddmrp_df)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                    st.session_state['ddmrp_df'] = ddmrp_df
                    st.session_state['orders_df'] = orders_df
                    st.session_state['matrix_df'] = matrix_df
                    st.session_state['stock_df'] = stock_df
                    
                    st.success("‚úÖ –†–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    # ========================
    # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    # ========================
    
    if 'ddmrp_df' in st.session_state:
        ddmrp_df = st.session_state['ddmrp_df']
        orders_df = st.session_state['orders_df']
        
        # ========================
        # –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò
        # ========================
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            total_items = len(ddmrp_df)
            st.metric("üì¶ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π", total_items)
        
        with col2:
            red_count = len(ddmrp_df[ddmrp_df['Buffer_Status'] == 'RED'])
            st.metric("üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö", red_count)
        
        with col3:
            yellow_count = len(ddmrp_df[ddmrp_df['Buffer_Status'] == 'YELLOW'])
            st.metric("üü° –¢—Ä–µ–±—É—é—Ç –∑–∞–∫–∞–∑–∞", yellow_count)
        
        with col4:
            green_count = len(ddmrp_df[ddmrp_df['Buffer_Status'] == 'GREEN'])
            st.metric("üü¢ –í –Ω–æ—Ä–º–µ", green_count)
        
        with col5:
            total_order_qty = orders_df['Order_Qty'].sum() if not orders_df.empty else 0
            st.metric("üìã –ö –∑–∞–∫–∞–∑—É (—à—Ç)", f"{int(total_order_qty)}")
        
        st.markdown("---")
        
        # ========================
        # –í–ö–õ–ê–î–ö–ò
        # ========================
        
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìã –ó–∞–∫–∞–∑—ã",
            "üìä –í—Å–µ —Ç–æ–≤–∞—Ä—ã",
            "üè™ –ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
            "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "‚öôÔ∏è –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞"
        ])
        
        # ========================
        # TAB 1: –ó–ê–ö–ê–ó–´
        # ========================
        with tab1:
            st.subheader("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞")
            
            if not orders_df.empty:
                # –§–∏–ª—å—Ç—Ä—ã
                col1, col2 = st.columns(2)
                
                with col1:
                    selected_stores = st.multiselect(
                        "–§–∏–ª—å—Ç—Ä –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:",
                        options=sorted(orders_df['Store_ID'].unique()),
                        default=sorted(orders_df['Store_ID'].unique())
                    )
                
                with col2:
                    selected_status = st.multiselect(
                        "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
                        options=['RED', 'YELLOW'],
                        default=['RED', 'YELLOW']
                    )
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                filtered_orders = orders_df[
                    (orders_df['Store_ID'].isin(selected_stores)) &
                    (orders_df['Buffer_Status'].isin(selected_status))
                ]
                
                st.dataframe(
                    filtered_orders,
                    use_container_width=True,
                    hide_index=True
                )
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                st.markdown(
                    create_excel_download(filtered_orders, f"orders_{datetime.now().strftime('%Y%m%d')}.xlsx"),
                    unsafe_allow_html=True
                )
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –∑–∞–∫–∞–∑–æ–≤
                st.markdown("---")
                fig = create_top_orders_chart(filtered_orders)
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                
            else:
                st.success("üéâ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–æ—Ä–º–µ! –ó–∞–∫–∞–∑–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        
        # ========================
        # TAB 2: –í–°–ï –¢–û–í–ê–†–´
        # ========================
        with tab2:
            st.subheader("üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å—ã –±—É—Ñ–µ—Ä–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2, col3 = st.columns(3)
            
            with col1:
                filter_stores = st.multiselect(
                    "–ú–∞–≥–∞–∑–∏–Ω—ã:",
                    options=sorted(ddmrp_df['Store_ID'].unique()),
                    default=sorted(ddmrp_df['Store_ID'].unique()),
                    key='all_stores'
                )
            
            with col2:
                filter_status = st.multiselect(
                    "–°—Ç–∞—Ç—É—Å –±—É—Ñ–µ—Ä–∞:",
                    options=['RED', 'YELLOW', 'GREEN', 'EXCESS'],
                    default=['RED', 'YELLOW', 'GREEN', 'EXCESS'],
                    key='all_status'
                )
            
            with col3:
                search_article = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É/–æ–ø–∏—Å–∞–Ω–∏—é:")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_all = ddmrp_df[
                (ddmrp_df['Store_ID'].isin(filter_stores)) &
                (ddmrp_df['Buffer_Status'].isin(filter_status))
            ]
            
            if search_article:
                filtered_all = filtered_all[
                    filtered_all['Article'].str.contains(search_article, case=False, na=False) |
                    filtered_all['Describe'].str.contains(search_article, case=False, na=False)
                ]
            
            st.dataframe(
                filtered_all,
                use_container_width=True,
                hide_index=True
            )
            
            st.markdown(
                create_excel_download(filtered_all, f"all_items_{datetime.now().strftime('%Y%m%d')}.xlsx"),
                unsafe_allow_html=True
            )
        
        # ========================
        # TAB 3: –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú
        # ========================
        with tab3:
            st.subheader("üè™ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
            
            # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
            selected_store = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
                options=sorted(ddmrp_df['Store_ID'].unique())
            )
            
            store_data = ddmrp_df[ddmrp_df['Store_ID'] == selected_store]
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ SKU", len(store_data))
            
            with col2:
                red_store = len(store_data[store_data['Buffer_Status'] == 'RED'])
                st.metric("üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö", red_store)
            
            with col3:
                yellow_store = len(store_data[store_data['Buffer_Status'] == 'YELLOW'])
                st.metric("üü° –¢—Ä–µ–±—É—é—Ç –∑–∞–∫–∞–∑–∞", yellow_store)
            
            with col4:
                order_qty_store = store_data['Order_Qty'].sum()
                st.metric("–ö –∑–∞–∫–∞–∑—É (—à—Ç)", int(order_qty_store))
            
            st.markdown("---")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
            st.dataframe(
                store_data,
                use_container_width=True,
                hide_index=True
            )
            
            st.markdown(
                create_excel_download(store_data, f"store_{selected_store}_{datetime.now().strftime('%Y%m%d')}.xlsx"),
                unsafe_allow_html=True
            )
        
        # ========================
        # TAB 4: –ê–ù–ê–õ–ò–¢–ò–ö–ê
        # ========================
        with tab4:
            st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
                fig1 = create_buffer_status_chart(ddmrp_df)
                st.plotly_chart(fig1, use_container_width=True)
            
            with col2:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                fig2 = create_store_summary_chart(ddmrp_df)
                st.plotly_chart(fig2, use_container_width=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            if 'ABC_Class' in ddmrp_df.columns:
                st.markdown("---")
                st.subheader("ABC-–∞–Ω–∞–ª–∏–∑")
                
                abc_status = ddmrp_df.groupby(['ABC_Class', 'Buffer_Status']).size().reset_index(name='Count')
                
                fig3 = px.bar(
                    abc_status,
                    x='ABC_Class',
                    y='Count',
                    color='Buffer_Status',
                    title='–°—Ç–∞—Ç—É—Å—ã –±—É—Ñ–µ—Ä–æ–≤ –ø–æ ABC-–∫–ª–∞—Å—Å–∞–º',
                    color_discrete_map={
                        'RED': '#FF4444',
                        'YELLOW': '#FFD700',
                        'GREEN': '#44FF44',
                        'EXCESS': '#4444FF'
                    },
                    barmode='group'
                )
                
                st.plotly_chart(fig3, use_container_width=True)
        
        # ========================
        # TAB 5: –î–ï–¢–ê–õ–ò –†–ê–°–ß–ï–¢–ê
        # ========================
        with tab5:
            st.subheader("‚öôÔ∏è –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–∞ DDMRP")
            
            st.markdown("""
            ### –ó–æ–Ω—ã –±—É—Ñ–µ—Ä–∞:
            
            - **üî¥ –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (Red Zone)**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º –∑–∞–ø–∞—Å–∞
                - –ù–∏–∂–µ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è - —Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑!
                
            - **üü° –ñ–µ–ª—Ç–∞—è –∑–æ–Ω–∞ (Yellow Zone)**: –ó–æ–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                - –í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
                
            - **üü¢ –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ (Green Zone)**: –¶–µ–ª–µ–≤–æ–π –∑–∞–ø–∞—Å
                - –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–∞
                
            - **üîµ –ò–∑–ª–∏—à–µ–∫ (Excess)**: –ó–∞–ø–∞—Å –≤—ã—à–µ Top of Green
                - –í–æ–∑–º–æ–∂–µ–Ω –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –∑–∞–ø–∞—Å
            
            ### –†–∞—Å—á–µ—Ç Top of Green:
            ```
            Top of Green = Red Zone + Yellow Zone + Green Zone
            ```
            
            ### –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:
            ```
            Order Qty = Top of Green - Current Stock
            ```
            (—Ç–æ–ª—å–∫–æ –¥–ª—è RED –∏ YELLOW —Å—Ç–∞—Ç—É—Å–æ–≤)
            
            ### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
            1. üî¥ RED - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            2. üü° YELLOW - –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            3. üü¢ GREEN - –ù–æ—Ä–º–∞ (–∑–∞–∫–∞–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            4. üîµ EXCESS - –ò–∑–ª–∏—à–µ–∫ (–∑–∞–∫–∞–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            """)
            
            # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
            st.markdown("---")
            st.subheader("üìù –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞")
            
            example_data = {
                '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['Red Zone', 'Yellow Zone', 'Green Zone', 'Top of Green', '–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫', '–°—Ç–∞—Ç—É—Å', '–ö –∑–∞–∫–∞–∑—É'],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': ['10 —à—Ç', '20 —à—Ç', '30 —à—Ç', '60 —à—Ç', '15 —à—Ç', 'üü° YELLOW', '45 —à—Ç (60 - 15)']
            }
            
            st.table(pd.DataFrame(example_data))
    
    else:
        # ========================
        # –ù–ê–ß–ê–õ–¨–ù–´–ô –≠–ö–†–ê–ù
        # ========================
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        with st.expander("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
            st.markdown("""
            ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:
            
            1. **–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É** –≤ Google Sheets —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:
               - `Article` - –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ ‚ö†Ô∏è
               - `Describe` - –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚ö†Ô∏è
               - `Store_ID` - –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (6, 9, 10...) ‚ö†Ô∏è
               - `Red_Zone` - –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (—à—Ç) ‚ö†Ô∏è
               - `Yellow_Zone` - –ñ–µ–ª—Ç–∞—è –∑–æ–Ω–∞ (—à—Ç) ‚ö†Ô∏è
               - `Green_Zone` - –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ (—à—Ç) ‚ö†Ô∏è
               - `Brand` - –ë—Ä–µ–Ω–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
               - `Avg_Daily_Usage` - –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥/–¥–µ–Ω—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
               - `ABC_Class` - ABC-–∫–ª–∞—Å—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
               - –∏ –¥—Ä—É–≥–∏–µ...
            
            2. **–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∞–π–ª –æ—Å—Ç–∞—Ç–∫–æ–≤** –≤ Excel —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
               - `Art` ‚Üí –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ `Article` ‚ö†Ô∏è
               - `Magazin` ‚Üí –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ `Store_ID` ‚ö†Ô∏è
               - `Describe` - –û–ø–∏—Å–∞–Ω–∏–µ ‚ö†Ô∏è
               - `–∫-–≤–æ` ‚Üí –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ `Current_Stock` ‚ö†Ô∏è
               - `Model` - –ú–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
            3. **–í—Å—Ç–∞–≤—å—Ç–µ URL** Google Sheets –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            
            4. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel** —Ñ–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
            
            5. **–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"**
            
            6. **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö:
               - üìã –ó–∞–∫–∞–∑—ã - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
               - üìä –í—Å–µ —Ç–æ–≤–∞—Ä—ã - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –±—É—Ñ–µ—Ä–∞–º–∏
               - üè™ –ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º - –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
               - üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
               - ‚öôÔ∏è –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ - –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è DDMRP
            
            ### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ DDMRP:
            - ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏
            - ‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∏ –∏–∑–ª–∏—à–∫–æ–≤
            - ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
            - ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
            - ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
            """)
        
        with st.expander("üéØ –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"):
            st.markdown("#### –¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (Google Sheets):")
            example_matrix = pd.DataFrame({
                'Article': ['ART001', 'ART002', 'ART003'],
                'Describe': ['–ú–æ–ª–æ–∫–æ 3.2% 1–ª', '–•–ª–µ–± –±–µ–ª—ã–π', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ'],
                'Store_ID': ['6', '6', '9'],
                'Red_Zone': [10, 15, 5],
                'Yellow_Zone': [20, 25, 10],
                'Green_Zone': [30, 35, 15],
                'Brand': ['–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ', '–•–ª–µ–±–Ω—ã–π –¥–æ–º', '–í–æ–ª–æ–≥–æ–¥—Å–∫–æ–µ']
            })
            st.dataframe(example_matrix, use_container_width=True)
            
            st.markdown("#### –û—Å—Ç–∞—Ç–∫–∏ (Excel):")
            example_stock = pd.DataFrame({
                'Art': ['ART001', 'ART002', 'ART003'],
                'Magazin': ['6', '6', '9'],
                'Describe': ['–ú–æ–ª–æ–∫–æ 3.2% 1–ª', '–•–ª–µ–± –±–µ–ª—ã–π', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ'],
                '–∫-–≤–æ': [8, 45, 12],
                'Model': ['VPL 932', 'RB 4534', 'VOL 123']
            })
            st.dataframe(example_stock, use_container_width=True)


if __name__ == "__main__":
    main()
