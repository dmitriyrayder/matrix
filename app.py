import streamlit as st
import pandas as pd
import requests
from io import BytesIO
import base64

def download_google_sheet(sheet_url):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç CSV —ç–∫—Å–ø–æ—Ä—Ç–∞
        if '/edit' in sheet_url:
            csv_url = sheet_url.replace('/edit?gid=', '/export?format=csv&gid=')
            csv_url = csv_url.split('#')[0]  # –£–±–∏—Ä–∞–µ–º —è–∫–æ—Ä—å
        else:
            csv_url = sheet_url
        
        response = requests.get(csv_url)
        if response.status_code == 200:
            return pd.read_csv(BytesIO(response.content))
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Google Sheets: {str(e)}")
        return None

def process_stock_data(df):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    if df is None or df.empty:
        return None
    
    # –ù–∞–π–¥–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "–ú–∞–≥.")
    store_columns = [col for col in df.columns if col.startswith('–ú–∞–≥.')]
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ–≤–∞—Ä–æ–≤
    result = []
    for _, row in df.iterrows():
        describe = row.get('Describe', '')
        if pd.isna(describe) or describe == '':
            continue
            
        # –°—á–∏—Ç–∞–µ–º –≤ —Å–∫–æ–ª—å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –µ—Å—Ç—å —Ç–æ–≤–∞—Ä
        in_stock_count = 0
        stores_with_stock = []
        
        for store_col in store_columns:
            stock_value = row.get(store_col, '')
            if not pd.isna(stock_value) and str(stock_value).strip() != '' and str(stock_value) != '0':
                in_stock_count += 1
                stores_with_stock.append(store_col)
        
        result.append({
            '–ê—Ä—Ç–∏–∫—É–ª': row.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
            'Describe': describe,
            '–ú–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ç–æ–≤–∞—Ä–æ–º': in_stock_count,
            '–í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤': len(store_columns),
            '–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤': ', '.join(stores_with_stock)
        })
    
    return pd.DataFrame(result)

def compare_assortment(should_be_df, actual_df):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"""
    if should_be_df is None or actual_df is None:
        return None, None, None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ Describe –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    should_be_describe_col = None
    actual_describe_col = None
    
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É Describe (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è)
    for col in should_be_df.columns:
        if 'describe' in col.lower() or '–æ–ø–∏—Å–∞–Ω–∏–µ' in col.lower():
            should_be_describe_col = col
            break
    
    for col in actual_df.columns:
        if 'describe' in col.lower() or '–æ–ø–∏—Å–∞–Ω–∏–µ' in col.lower():
            actual_describe_col = col
            break
    
    if should_be_describe_col is None or actual_describe_col is None:
        st.error(f"–ö–æ–ª–æ–Ω–∫–∞ 'Describe' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ: {list(should_be_df.columns)}")
        st.error(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: {list(actual_df.columns)}")
        return None, None, None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ Describe
    should_be_items = set(should_be_df[should_be_describe_col].dropna().astype(str).str.strip())
    actual_items = set(actual_df[actual_describe_col].dropna().astype(str).str.strip())
    
    # –ê–Ω–∞–ª–∏–∑
    missing_items = should_be_items - actual_items  # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å, –Ω–æ –Ω–µ—Ç
    extra_items = actual_items - should_be_items    # –ï—Å—Ç—å, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
    matching_items = should_be_items & actual_items # –°–æ–≤–ø–∞–¥–∞—é—Ç
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    available_cols_should_be = [col for col in ['ART', 'Describe', '–ù–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞', 'Price:'] if col in should_be_df.columns]
    available_cols_actual = [col for col in ['–ê—Ä—Ç–∏–∫—É–ª', 'Describe', '–ú–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ç–æ–≤–∞—Ä–æ–º'] if col in actual_df.columns]
    
    missing_df = should_be_df[should_be_df[should_be_describe_col].isin(missing_items)][available_cols_should_be]
    
    extra_df = actual_df[actual_df[actual_describe_col].isin(extra_items)][available_cols_actual]
    
    matching_df = should_be_df[should_be_df[should_be_describe_col].isin(matching_items)][available_cols_should_be]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if '–ú–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ç–æ–≤–∞—Ä–æ–º' in actual_df.columns:
        matching_with_stock = matching_df.merge(
            actual_df[[actual_describe_col, '–ú–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ç–æ–≤–∞—Ä–æ–º']], 
            left_on=should_be_describe_col,
            right_on=actual_describe_col, 
            how='left'
        )
    else:
        matching_with_stock = matching_df
    
    return missing_df, extra_df, matching_with_stock

def create_download_link(df, filename):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞"""
    if df is None or df.empty:
        return ""
    
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')
    
    excel_data = output.getvalue()
    b64 = base64.b64encode(excel_data).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">üì• –°–∫–∞—á–∞—Ç—å {filename}</a>'
    return href

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤", layout="wide")

st.title("üè™ –°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

# Google Sheets URL
google_sheet_url = st.sidebar.text_input(
    "Google Sheets URL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç):",
    value="https://docs.google.com/spreadsheets/d/1D8hz6ZLo_orDMokYms2lQkO_A3nnYNEFYe-mO1CDcrY/export?format=csv&gid=1286042599"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
uploaded_file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤",
    type=['xlsx', 'xls']
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
        should_be_df = download_google_sheet(google_sheet_url)
        
        if should_be_df is not None:
            st.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Google Sheets: {len(should_be_df)} —Å—Ç—Ä–æ–∫")
            st.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(should_be_df.columns)}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
        actual_df = None
        if uploaded_file is not None:
            try:
                raw_df = pd.read_excel(uploaded_file)
                st.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Excel: {len(raw_df)} —Å—Ç—Ä–æ–∫")
                st.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(raw_df.columns)}")
                actual_df = process_stock_data(raw_df)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        
        if should_be_df is not None and actual_df is not None:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
            st.session_state['should_be_df'] = should_be_df
            st.session_state['actual_df'] = actual_df
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            missing_df, extra_df, matching_df = compare_assortment(should_be_df, actual_df)
            
            st.session_state['missing_df'] = missing_df
            st.session_state['extra_df'] = extra_df
            st.session_state['matching_df'] = matching_df
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if 'should_be_df' in st.session_state and 'actual_df' in st.session_state:
    should_be_df = st.session_state['should_be_df']
    actual_df = st.session_state['actual_df']
    missing_df = st.session_state.get('missing_df')
    extra_df = st.session_state.get('extra_df')
    matching_df = st.session_state.get('matching_df')
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìã –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–≤–∞—Ä–æ–≤", len(should_be_df))
    
    with col2:
        st.metric("üè™ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤", len(actual_df))
    
    with col3:
        st.metric("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", len(missing_df) if missing_df is not None else 0)
    
    with col4:
        st.metric("‚ûï –õ–∏—à–Ω–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", len(extra_df) if extra_df is not None else 0)
    
    st.markdown("---")
    
    # –í–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    tab1, tab2, tab3, tab4 = st.tabs(["‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã", "‚ûï –õ–∏—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã", "‚úÖ –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã", "üìä –°–≤–æ–¥–∫–∞"])
    
    with tab1:
        st.subheader("–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å")
        if missing_df is not None and not missing_df.empty:
            st.dataframe(missing_df, use_container_width=True)
            st.markdown(create_download_link(missing_df, "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ_—Ç–æ–≤–∞—Ä—ã.xlsx"), unsafe_allow_html=True)
        else:
            st.success("üéâ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏!")
    
    with tab2:
        st.subheader("–õ–∏—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã (–µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, –Ω–æ –Ω–µ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ)")
        if extra_df is not None and not extra_df.empty:
            st.dataframe(extra_df, use_container_width=True)
            st.markdown(create_download_link(extra_df, "–ª–∏—à–Ω–∏–µ_—Ç–æ–≤–∞—Ä—ã.xlsx"), unsafe_allow_html=True)
        else:
            st.info("‚ÑπÔ∏è –õ–∏—à–Ω–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    with tab3:
        st.subheader("–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        if matching_df is not None and not matching_df.empty:
            st.dataframe(matching_df, use_container_width=True)
            st.markdown(create_download_link(matching_df, "—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ_—Ç–æ–≤–∞—Ä—ã.xlsx"), unsafe_allow_html=True)
        else:
            st.warning("‚ö†Ô∏è –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    with tab4:
        st.subheader("üìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        if missing_df is not None and matching_df is not None:
            total_should_be = len(should_be_df)
            total_missing = len(missing_df)
            total_matching = len(matching_df)
            
            coverage_percent = (total_matching / total_should_be * 100) if total_should_be > 0 else 0
            
            st.metric("üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞", f"{coverage_percent:.1f}%")
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫—Ä—ã—Ç–∏—è
            import plotly.express as px
            
            coverage_data = pd.DataFrame({
                '–°—Ç–∞—Ç—É—Å': ['–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [total_matching, total_missing],
                '–ü—Ä–æ—Ü–µ–Ω—Ç': [coverage_percent, 100 - coverage_percent]
            })
            
            fig = px.pie(coverage_data, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', names='–°—Ç–∞—Ç—É—Å', 
                        title="–ü–æ–∫—Ä—ã—Ç–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞")
            st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    with st.expander("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:
        
        1. **Google Sheets URL**: –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º
           - –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'Describe'
           
        2. **Excel —Ñ–∞–π–ª**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
           - –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: '–ê—Ä—Ç–∏–∫—É–ª', 'Describe' –∏ –∫–æ–ª–æ–Ω–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
           
        3. **–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"**
        
        4. **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        
        ### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
        - **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã**: –¢–æ–≤–∞—Ä—ã –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        - **–õ–∏—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã**: –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ  
        - **–°–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã**: –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ, –∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        - **–°–≤–æ–¥–∫–∞**: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è
        """)
